#include <string>
#include <cassert>

#include "lua.hpp"
#include "config.hpp"

// generated by cmake
extern "C" int load_luafiles(lua_State* L);

static lua_State* L;

void config::load()
{
    L = luaL_newstate();
    assert(L);
    luaL_openlibs(L);
    load_luafiles(L);
}

float config::get_float(const std::string& name)
{
    lua_getglobal(L, name.c_str());
    float num = luaL_checknumber(L, -1);
    lua_pop(L, 1);
    return num;
}

bool config::get_bool(const std::string& name)
{
    lua_getglobal(L, name.c_str());
    float num = lua_toboolean(L, -1);
    lua_pop(L, 1);
    return num;
}

std::string config::get_string(const std::string& name)
{
    lua_getglobal(L, name.c_str());
    const char* str = luaL_checkstring(L, -1);
    std::string ret(str);
    lua_pop(L, 1);
    return ret;
}

#include "shaders.hpp"
void config::load_shaders()
{
    lua_getglobal(L, "SHADERS");
    lua_pushnil(L);
    while (lua_next(L, -2)) {
        const char* name = lua_tostring(L, -2);
        const char* code = lua_tostring(L, -1);
        loadShader(name, code);
        lua_pop(L, 1);
    }
    lua_pop(L, 1);
}

